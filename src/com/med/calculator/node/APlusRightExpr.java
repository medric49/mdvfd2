/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.med.calculator.node;

import com.med.calculator.analysis.*;

@SuppressWarnings("nls")
public final class APlusRightExpr extends PRightExpr
{
    private PRightExpr _rightExpr_;
    private TPlus _plus_;
    private PFactor _factor_;

    public APlusRightExpr()
    {
        // Constructor
    }

    public APlusRightExpr(
        @SuppressWarnings("hiding") PRightExpr _rightExpr_,
        @SuppressWarnings("hiding") TPlus _plus_,
        @SuppressWarnings("hiding") PFactor _factor_)
    {
        // Constructor
        setRightExpr(_rightExpr_);

        setPlus(_plus_);

        setFactor(_factor_);

    }

    @Override
    public Object clone()
    {
        return new APlusRightExpr(
            cloneNode(this._rightExpr_),
            cloneNode(this._plus_),
            cloneNode(this._factor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlusRightExpr(this);
    }

    public PRightExpr getRightExpr()
    {
        return this._rightExpr_;
    }

    public void setRightExpr(PRightExpr node)
    {
        if(this._rightExpr_ != null)
        {
            this._rightExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightExpr_ = node;
    }

    public TPlus getPlus()
    {
        return this._plus_;
    }

    public void setPlus(TPlus node)
    {
        if(this._plus_ != null)
        {
            this._plus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plus_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rightExpr_)
            + toString(this._plus_)
            + toString(this._factor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rightExpr_ == child)
        {
            this._rightExpr_ = null;
            return;
        }

        if(this._plus_ == child)
        {
            this._plus_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rightExpr_ == oldChild)
        {
            setRightExpr((PRightExpr) newChild);
            return;
        }

        if(this._plus_ == oldChild)
        {
            setPlus((TPlus) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
