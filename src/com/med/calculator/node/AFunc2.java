/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.med.calculator.node;

import com.med.calculator.analysis.*;

@SuppressWarnings("nls")
public final class AFunc2 extends PFunc2
{
    private TFunction2 _function2_;
    private TLPar _lPar_;
    private PRightExpr _rightExpr_;
    private TComma _comma_;
    private POtherExpr _otherExpr_;
    private TRPar _rPar_;

    public AFunc2()
    {
        // Constructor
    }

    public AFunc2(
        @SuppressWarnings("hiding") TFunction2 _function2_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PRightExpr _rightExpr_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") POtherExpr _otherExpr_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setFunction2(_function2_);

        setLPar(_lPar_);

        setRightExpr(_rightExpr_);

        setComma(_comma_);

        setOtherExpr(_otherExpr_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AFunc2(
            cloneNode(this._function2_),
            cloneNode(this._lPar_),
            cloneNode(this._rightExpr_),
            cloneNode(this._comma_),
            cloneNode(this._otherExpr_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunc2(this);
    }

    public TFunction2 getFunction2()
    {
        return this._function2_;
    }

    public void setFunction2(TFunction2 node)
    {
        if(this._function2_ != null)
        {
            this._function2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._function2_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PRightExpr getRightExpr()
    {
        return this._rightExpr_;
    }

    public void setRightExpr(PRightExpr node)
    {
        if(this._rightExpr_ != null)
        {
            this._rightExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightExpr_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public POtherExpr getOtherExpr()
    {
        return this._otherExpr_;
    }

    public void setOtherExpr(POtherExpr node)
    {
        if(this._otherExpr_ != null)
        {
            this._otherExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._otherExpr_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._function2_)
            + toString(this._lPar_)
            + toString(this._rightExpr_)
            + toString(this._comma_)
            + toString(this._otherExpr_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._function2_ == child)
        {
            this._function2_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._rightExpr_ == child)
        {
            this._rightExpr_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._otherExpr_ == child)
        {
            this._otherExpr_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._function2_ == oldChild)
        {
            setFunction2((TFunction2) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._rightExpr_ == oldChild)
        {
            setRightExpr((PRightExpr) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._otherExpr_ == oldChild)
        {
            setOtherExpr((POtherExpr) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
