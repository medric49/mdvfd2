/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.med.calculator.analysis;

import java.util.*;
import com.med.calculator.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightExprExpr(ARightExprExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorRightExpr(AFactorRightExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusRightExpr(APlusRightExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusRightExpr(AMinusRightExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegExprRightExpr(ANegExprRightExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprOtherExpr(AExprOtherExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegNegExpr(ANegNegExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPowFactor(APowFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultFuncFactor(AMultFuncFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFuncFactor(ADivFuncFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFuncFactor(AModFuncFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPowFuncFactor(APowFuncFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultFunc2Factor(AMultFunc2Factor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFunc2Factor(AModFunc2Factor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFunc2Factor(ADivFunc2Factor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPowFunc2Factor(APowFunc2Factor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionFactor(AFunctionFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunction2Factor(AFunction2Factor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprExprBloc(AExprExprBloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunc(AFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunc2(AFunc2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstTerm(AConstTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction2(TFunction2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
